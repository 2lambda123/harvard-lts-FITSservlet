<?xml version="1.0" ?> 
<project name="FITS Service" default="war">

	<!--
	     Compile classpath depends on finding an external fits.jar from the FITS project.
         The environment variable "fits_jar_location" can be set to point to the
         directory containing fits.jar (or some version JAR such as fits-1.0.0.jar).
         Alternatively, set the value for property "fits.jar.fallback.location" in the build.properties file.
	 -->
	<property file="build.properties" />
	<property environment="env"/> <!-- access to environment properties -->
	<property name="fits.jar.environment.location" location="${env.fits_jar_location}" />

	
	<!-- ===================== Version properties file =========================== -->
    <property name="build.version.file" value="version.properties"/>
    <property file="${build.version.file}" />
	    
	<!-- ==================== File and Directory Names ======================== -->

	<property name="app.name"              value="fits" />
	<property name="app.longName"          value="File Information Toolset Web Service" /> 
	<property name="war.name"              value="${app.name}-${build.version}.war" />
	<property name="manifest.name"         value="MANIFEST.MF" />
	<property name="manifest.dir"          location="WebContent/META-INF" />
	<property name="src.dirs"              location="src" />
    <property name="test.dirs"             location="test" />
	<property name="classes.dir"           location="WebContent/WEB-INF/classes" />
	<property name="dist.dir"              location="dist" />
    
    <target name="set-fits-jar-env-directory-exists">
        <!-- Set property if the fits.jar fallback directory exists (before checking for JAR file). -->
        <condition property="fits.jar.environment.location.exists">
            <available file="${env.fits_jar_location}" type="dir"/>
        </condition>
    </target>
    
	<target name="set-fits-jar-location-by-env" if="fits.jar.environment.location.exists"
		depends="set-fits-jar-env-directory-exists">
		<!--
		  Sets the count of fits JAR files found in (a possibly set) environment variable pointing to directory where file resides.
		  (There should only be a single fits JAR file if this location exists.)
		-->
        <fileset dir="${fits.jar.environment.location}" includes="*.jar" id="fits.jar.environment">
            <filename regex="fits.*\.jar" /> <!-- regex takes into account version number in JAR file. -->
        </fileset>
		<!-- The following can only be called if the refid has a valid 'dir' attribute value. Thus, the 'if' on this target. -->
		<resourcecount refid="fits.jar.environment" property="environ.fits.jar.count" />
	</target>
	
	<target name="set-fits-jar-fallback-directory-exists">
		<!-- Set property if the fits.jar fallback directory exists (before checking for JAR file). -->
	    <condition property="fits.jar.fallback.location.exists">
	    	<available file="${fits.jar.fallback.location}" type="dir"/>
	    </condition>
	</target>
    
    <target name="set-fits-jar-location-by-fallback" if="fits.jar.fallback.location.exists" unless="fits.jar.environment.location.exists" 
    	depends="set-fits-jar-fallback-directory-exists">
        <!--
            Directory of possible FITS JAR file as set by fallback location as set in build.properties file.
            Only called if environment variable for fir JAR directory not set. Thus, the 'unless' on this target.
            (There should only be a single fits JAR file if this location exists.)
        -->
        <fileset dir="${fits.jar.fallback.location}" includes="*.jar" id="fits.jar.fallback">
            <filename regex="fits.*\.jar" /> <!-- regex takes into account version number in JAR file. -->
        </fileset>
        <!-- Set property indicating number of FITS JAR files at fallback location. -->
        <resourcecount refid="fits.jar.fallback" property="fallback.fits.jar.count" />
    </target>
    
	<target name="init" depends="clean, set-fits-jar-location-by-env, set-fits-jar-location-by-fallback">

    	<!-- Location of possible FITS JAR file as set by environment variable. -->
    	<fileset dir="${fits.jar.environment.location}" includes="*.jar" id="fits.jar.environment">
            <filename regex="fits.*\.jar" /> <!-- regex takes into account version number in JAR file. -->
    	</fileset>
    	
    	<!-- Property values for FITS JAR file dependency. -->
    	<echo message="fits.jar.environment.location: ${env.fits_jar_location}" />
        <echo message="fits.jar.environment.location.exists: ${fits.jar.environment.location.exists}" />
    	<echo message="fits JAR files in environment variable location: ${environ.fits.jar.count}" />
    	<echo message="fits.jar.fallback.location: ${fits.jar.fallback.location}" />
        <echo message="fits.jar.fallback.location.exists: ${fits.jar.fallback.location.exists}" />
        <echo message="fits JAR files in fallback location: ${fallback.fits.jar.count}" />
    	
    	<fail message="*** Either missing FITS JAR file or more than one is present. There should be one and only one FITS JAR file. Cannot build! ***">
    		<condition>
   				<not>
   				    <xor>
        				<equals arg1="${environ.fits.jar.count}" arg2="1" />
                        <equals arg1="${fallback.fits.jar.count}" arg2="1" />
   				    </xor>
                </not>
   			</condition>
   		</fail>

		<!-- Set fits JAR file for use in comilation. -->
        <condition property="fits.jar.file.dir" value="${fits.jar.environment.location}">
            <equals arg1="${environ.fits.jar.count}" arg2="1" />
        </condition>
		<!-- Property cant be set a second time if set in the above condition. -->
        <condition property="fits.jar.file.dir" value="${fits.jar.fallback.location}">
            <equals arg1="${fallback.fits.jar.count}" arg2="1" />
        </condition>
		
    	<!-- Verify existance of version properties file containing the expected property. -->
    	<fail message="Cannot find file: ${build.version.file}">
    		<condition>
    			<not>
                    <resourcecount count="1">
                        <fileset dir="." includes="${build.version.file}" />
                    </resourcecount>
    			</not>
    		</condition>
    	</fail>
    	<fail message="Property 'build.version' not found in file ${build.version.file}">
    		<condition>
    			<not>
    			    <isset property="build.version" />
    			</not>
   			</condition>
   		</fail>
    	
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${dist.dir}" />
    </target>
    
    <target name="compile" depends="init" description="Compile all source code">
        <javac destdir="${classes.dir}" debug="true" srcdir="${src.dirs}:${test.dirs}" includeantruntime="false" source="1.7" target="1.7">
        	<classpath>
                <fileset dir="WebContent/WEB-INF/lib">
                    <include name="*.jar" />
                </fileset>
        		<!-- need the following to compile test classes -->
                <fileset dir="lib">
                    <include name="*.jar" />
                </fileset>
        		<fileset dir="${fits.jar.file.dir}">
        			<include name="*.jar"/>
        		</fileset>
        	</classpath>
        </javac>
    </target>
    
    <target name="war" depends="compile" description="Build the WAR file">
    	<antcall target="create-manifest" />
    	<!-- Put logging configuration file into the classes directory -->
    	<copy file="WebContent/WEB-INF/log4j.properties" todir="${classes.dir}" />
        <copy file="WebContent/WEB-INF/fits-service.properties" todir="${classes.dir}" />
        <war destfile="${dist.dir}/${war.name}" webxml="WebContent/WEB-INF/web.xml"
        	manifest="${manifest.dir}/${manifest.name}">
            <fileset dir="WebContent" />
        </war>
    </target>
	
	<!-- Must set environment variable CATALINA_HOME for location to deploy WAR file. -->
	<!-- For Eclipse set an environment variable from any task's "Ant build..." -->
    <target name="deploy-to-tomcat"  description="Deploy the WAR file to Tomcat at (configured) server location.">
    	<fail unless="env.CATALINA_HOME" message="CATALINA_HOME not set. Cannot deploy ${war.name}."/>
        <copy file="${dist.dir}/${war.name}"
        	todir="${env.CATALINA_HOME}/webapps"></copy>
    	<echo message="${war.name} deployed to ${env.CATALINA_HOME}/webapps" />
    </target>

    <target name="undeploy-from-tomcat" description="Undeploy the WAR file from Tomcat at (configured) server location.">
        <fail unless="env.CATALINA_HOME" message="CATALINA_HOME not set. Cannot undeploy ${war.name}."/>
		<available file="${env.CATALINA_HOME}/webapps/${war.name}" property="war.file.found"/>
    	<fail unless="war.file.found" message="${env.CATALINA_HOME}/webapps/${war.name} does not exist." />
    	<delete file="${env.CATALINA_HOME}/webapps/${war.name}" />
    </target>
    
    <target name="clean" description="Clean the project">
        <delete  dir="${dist.dir}" />
        <delete dir="${classes.dir}" />
        <delete file="${manifest.dir}/${manifest.name}" failonerror="false" />
    </target>

    <target name="create-manifest">
        <tstamp>
            <format property="timestamp.isoformat" pattern="yyyy-MM-dd'T'HH:mm:ss" />
        </tstamp>
        <property name="build.timestamp" value="${timestamp.isoformat}" />
        <property name="build.date" value="${TODAY}" />
    
        <manifest file="${manifest.dir}/${manifest.name}">
            <attribute name="Application-Name" value="${app.longName}" />
            <attribute name="Specification-Version" value="${build.version}" />
            <attribute name="Implementation-Vendor" value="OIS Harvard University Library" />
            <attribute name="Build-Date" value="${build.date}" />
            <attribute name="Build-Timestamp" value="${build.timestamp}" />
        </manifest>
    </target>
    
</project>